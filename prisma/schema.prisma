// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]

  @@map("users")
}

// Account model for OAuth providers
model Account {
  id               String    @id @default(cuid())
  userId           String
  accountId        String
  providerId       String
  accessToken      String?   @db.Text
  refreshToken     String?   @db.Text
  idToken          String?   @db.Text
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope            String?
  password         String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

// Session model for Better Auth
model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Verification model for Better Auth
model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verifications")
}

// Subscription model for Polar.sh integration
model Subscription {
  id                 String            @id @default(cuid())
  userId             String
  polarSubscriptionId String           @unique
  status             SubscriptionStatus
  productId          String
  productName        String
  priceId            String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean          @default(false)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

// AI Usage tracking
model AIUsage {
  id        String   @id @default(cuid())
  userId    String?
  provider  String   // openai, anthropic, etc.
  model     String   // gpt-4, claude-3, etc.
  tokens    Int
  cost      Float?   // in cents
  createdAt DateTime @default(now())

  @@map("ai_usage")
}

// Webhook events for debugging
model WebhookEvent {
  id        String   @id @default(cuid())
  provider  String   // polar, stripe, etc.
  eventType String
  data      Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("webhook_events")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}
